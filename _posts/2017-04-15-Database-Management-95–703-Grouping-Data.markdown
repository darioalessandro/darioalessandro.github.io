---
layout: post
title:  "Database Management 95-703 - Grouping Data"
date:   2017-04-15 10:00:00 -0500
categories:  programming oracle general motors tep technical education program sql database db casteel Oracle 11g
---

## Outline

- Whole table

- Using MIN and MAX with non-numeric data.

- **GROUP BY**

- Restricting rows and groups

- Including "grand total"

## Group functions:

![Date formats]({{ site.url }}/assets/groupFunctions.png)

- Returns one result per group.

- **COUNT, MAX and MIN** can be used with any data type.

- **SUM, AVG, STDDEV and VARIANCE** only with numerical data types.

- They ignore null except **COUNT(*)**.

## Sum

Determine the total profit generated by sales to customer 1017

```sql

SELECT  SUM((paideach-cost) * quantity)
        AS "Profit from Customer 1017"
FROM    books   JOIN orderitems USING (isbn)
                JOIN orders USING (order#)
WHERE   customer# = 1017;

Profit from Customer 1017
--------------------------
                    55.28

```

## AVG

Management wants to know average expected profit from books in computer category

```sql
SELECT  ROUND(AVG(retail-cost),2)
        "Average Profit"
FROM    books
WHERE   category = 'COMPUTER';

Average Profit
---------------
18.26
```

## COUNT

How many orders are not shipped yet?

```sql
SELECT  COUNT(*) "Orders not shipped"
FROM    orders
WHERE   shipdate IS NULL;
```

## Results with "repeated" values

Count category of books"


```sql
SELECT COUNT(DISTINCT category)
        AS "# of categories"
        FROM books;
```

**NOTE: USE OF DISTINCT**

## MAX

What is the retail price of the mox expensive book written by LIsa White?

```sql
SELECT  MAX(retail) "Highest price"
FROM    books   JOIN bookauthor USING(isbn)
                JOIN author     USING(authorid)
WHERE   lname = 'WHITE'
AND     fname = 'LISA';

Highest Price
-----------------
39.95
```

## MAX with string

Alphabetically, what is the last title on the list of books?

```sql
SELECT  MAX(title)
        AS "Last Title"
FROM    books;
```

## MIN with dates

What is the earliest publication date of books in the BOOKS table?

```sql
SELECT  MIN(pubdate)
        AS "earliest book"
FROM    books;
```

## Summary statistics

We can use the group functions to provide a descriptive statistics of any numerical data.

Find basic statistics on the retail price of the books we have.

```sql
SELECT      COUNT(retail) "N",
            ROUND(AVG(retail),2) "Mean",
            ROUND(MIN(retail),2) "Min",
            ROUND(MAX(retail),2) "Max",
            ROUND(STDDEV(retail),2) "St. Dev"
FROM        books;

```

## Creating groups of data

```sql
SELECT      column(s),
            group_function(col.)
FROM        table(s)
WHERE       row_condition
GROUP BY    column(s)
HAVING      group_condition
ORDER BY    column(s);

```

## Using GROUP BY

- Allows rows that share some common characteristics to be grouped together.

- The **GROUP BY** clause

    - All non-aggregate expressions from the **SELECT** list must be included in the **GROUP BY** clause.

    - Expressions/columns used in the **GROUP BY** clause do not have to be on the SELECT list.

    - Column aliases are not allowed in ** GROUP BY**

- Group functions are performed once per group.

# Example Grouping data

How many books do we have in each book category?

Order the results alphabetically

```sql
SELECT category, COUNT(ISBN) "Count"
FROM books
GROUP BY category,
ORDER BY category;
```

# example

How many books in the inventory fit into each of the gift type.

```sql
SELECT      gift, COUNT (ISBN) "COUNT"
FROM        books, promotion
WHERE       retail BETWEEN minretail AND maxretail
GROUP BY gift;
```
For each publisher provide the number of books published and the average book price.

```sql
SELECT  name, COUNT(isbn) "# of Books", AVG(retail) "Avrg Price"
FROM    publisher JOIN books USING (pubid)
GROUP BY name;
```

## Common errors:

*Not using a GROUP BY** clause for columns in the SELECT clause.

```sql
SELECT category, AVG(retail-cost)
FROM books
WHERE category = 'COMPUTER';
```

**NOTE** THE PROBLEM IS THAT we can not use AVG without a GROUP BY.

The solution is to use **GROUP BY**

## Formatting output

What is the average expected profit in each book category? Order the results alphabetically.

```sql
SELECT      category, TO_CHAR(AVG(retail-cost), '$990.99') "Profit"
FROM        books
GROUP BY    category
ORDER BY    category;

```

## Restricting aggregated output

Find the categories and the avergage expectede profit for those categories that have average expected profit above $15.
Sort by the average expected profit in descending order.

```sql
SELECT category TO_CHAR(AVG(retail-cost), '$990,99') "Profit"
FROM books
GROUP BY category
HAVING  AVG(retail-cost) > 15
ORDER BY AVG(retail-cost) DESC;
```

Find the categories and the avergage expectede profit for those categories that have average expected profit above $15 for
books that were published since Jan 1, 2005.

```sql
SELECT category, TO_CHAR(AVG(retail-cost), '$990,99') "Profit"
FROM books
WHERE pubdate >= '01-Jan-05'
GROUP BY category
HAVING  AVG(retail-cost) > 15;
```

List the customers living in GA or FL who have placed an order of more than $80

```sql
SELECT  DISTINCT customer# || ' : ' ||
        INITCAP(firstname) || ' ' ||
        INITCAP(lastname) "Customer"
FROM    customers   JOIN orders   USING   (customer#)
                    JOIN orederitems USING (order#)
WHERE state = 'GA' OR state = 'FL'
GROUP BY order#, customer#, firstname, lastname
HAVING SUM(paideach*quantity) > 80;
```

## Group by using expressions

For each day of the week list the number of orders. Order the results by the number of orders from larger to smaller.

```sql
SELECT TO_CHAR(orderdate, 'Day') "Day", COUNT(order$) "$"
FROM orders
GROUP BY TO_CHAR(orderdate, 'Day')
ORDER BY 2 DESC;
```

For each year of publication list number of books published that year and average price of the books.

```sql
SELECT EXTRACT(YEAR FROM pubdate) "Year", COUNT(isbn) "# Books", TO_CHAR(AVG(retail), '$9990.99') "Avg Price"
FROM books
GROUP BY EXTRACT(YEAR from pubdate)
ORDER BY 1;
```

## Including "grand total"

How many books do we have in each book category? Also include the total number of books we have.

```sql
SQL>    SELECT  category, COUNT(ISBN) "# BOOKS"
        FROM    books
        GROUP BY category
        UNION
        SELECT NULL, COUNT(ISBN)
        FROM books;

CATEGORY        # BOOKS
--------------------------
BUSINESS            1
CHILDREN            2
...
                    14
```

## Nesting group functions

List individual orders with their total amount

```sql
SELECT  order#, SUM(paideach*quantity) "Order Total"
FROM    orderitems
GROUP BY order#;

```

What is the maximum sale ammount on an individual order?

```sql
SELECT MAX(SUM(paideach * quantity)) "Maximum Value Order"
FROM orderitems
GROUP BY order#;

Maximum Value Order
-------------------
             335.85

```

Determine the average profit generated by individual orders.

```sql
SELECT  AVG(SUM((paideach-cost) * quantity))
        "Average Profit per Order"
FROM    orderitems JOIN books   USING (isbm)
GROUP BY order#;

```



